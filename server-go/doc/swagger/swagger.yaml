basePath: /v1
definitions:
  controller.AuthResponse:
    properties:
      accessToken:
        type: string
    type: object
  controller.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controller.GetProfileDataResponse:
    properties:
      avatarUrl:
        type: string
      email:
        type: string
      fullname:
        type: string
      isUserProfile:
        type: boolean
      nickname:
        type: string
      numFollowers:
        type: integer
      numFollowing:
        type: integer
      userID:
        type: integer
    type: object
  controller.SuccessResponse:
    properties:
      error:
        type: string
    type: object
  controller.UpdateProfileResponse:
    properties:
      avatarUrl:
        type: string
      email:
        type: string
      fullname:
        type: string
      nickname:
        type: string
      userID:
        type: integer
    type: object
host: localhost:8000
info:
  contact: {}
  description: server-go.
  title: Instagram-lite-copy API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - multipart/form-data
      description: Authenticate a user with email and password
      parameters:
      - description: Email address of the user
        in: formData
        name: email
        required: true
        type: string
      - description: Password for the user account
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Login
      tags:
      - Auth
  /auth/registration:
    post:
      consumes:
      - multipart/form-data
      description: Register a new user with email, password, fullname, nickname, and
        avatar image
      parameters:
      - description: Email address of the user
        in: formData
        name: email
        required: true
        type: string
      - description: Password for the user account
        in: formData
        name: password
        required: true
        type: string
      - description: Full name of the user
        in: formData
        name: fullname
        required: true
        type: string
      - description: Nickname of the user
        in: formData
        name: nickname
        required: true
        type: string
      - description: Avatar image for the user
        in: formData
        name: avatarImage
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Register
      tags:
      - Auth
  /profiles/find/{name}:
    get:
      consumes:
      - application/json
      description: Find users by nickname with pagination
      operationId: find-users
      parameters:
      - description: User nickname
        in: path
        name: name
        required: true
        type: string
      - description: Number of results to return
        in: query
        name: limit
        required: true
        type: integer
      - description: Number of results to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - JwtAuth: []
      summary: Find users by nickname
      tags:
      - Profile
  /profiles/id/{id}:
    get:
      consumes:
      - application/json
      description: Get user profile data for the user with the given ID or nickname
      parameters:
      - description: User nickname
        format: NICKNAME
        in: path
        name: nickname
        type: string
      - description: User ID
        in: path
        name: id
        type: integer
      - description: JWT Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.GetProfileDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get user profile data
      tags:
      - Profile
  /profiles/id/{id}/follow:
    put:
      consumes:
      - application/json
      description: Toggle follow/unfollow user by user ID
      operationId: toggle-follow
      parameters:
      - description: User ID to follow/unfollow
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - JwtAuth: []
      summary: Toggle follow/unfollow user
      tags:
      - Profile
  /profiles/me:
    patch:
      consumes:
      - multipart/form-data
      description: Update the profile information for the authenticated user
      parameters:
      - description: User full name
        in: formData
        name: fullname
        type: string
      - description: User email address
        in: formData
        name: email
        type: string
      - description: User nickname
        in: formData
        name: nickname
        type: string
      - description: User avatar image
        in: formData
        name: avatarImage
        type: file
      - description: JWT Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UpdateProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Update user profile
      tags:
      - Profile
  /profiles/nickname/{nickname}:
    get:
      consumes:
      - application/json
      description: Get user profile data for the user with the given ID or nickname
      parameters:
      - description: User nickname
        format: NICKNAME
        in: path
        name: nickname
        type: string
      - description: User ID
        in: path
        name: id
        type: integer
      - description: JWT Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.GetProfileDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get user profile data
      tags:
      - Profile
swagger: "2.0"
