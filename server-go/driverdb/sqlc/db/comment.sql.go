// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: comment.sql

package db

import (
	"context"
	"time"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  post_id,
  user_id,
  text,
  created_at
) VALUES (
  $1, $2, $3, $4
) RETURNING id, post_id, user_id, text, created_at
`

type CreateCommentParams struct {
	PostID    int64
	UserID    int64
	Text      string
	CreatedAt time.Time
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.PostID,
		arg.UserID,
		arg.Text,
		arg.CreatedAt,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Text,
		&i.CreatedAt,
	)
	return i, err
}

const listCommentsOfPost = `-- name: ListCommentsOfPost :many
SELECT id, post_id, user_id, text, created_at FROM comments
WHERE post_id = $1
ORDER BY created_at
LIMIT $2
OFFSET $3
`

type ListCommentsOfPostParams struct {
	PostID int64
	Limit  int32
	Offset int32
}

func (q *Queries) ListCommentsOfPost(ctx context.Context, arg ListCommentsOfPostParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listCommentsOfPost, arg.PostID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Text,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
