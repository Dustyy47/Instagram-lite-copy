// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: follower.sql

package db

import (
	"context"
)

const createFollower = `-- name: CreateFollower :one
INSERT INTO followers (
  user_from_id,
  user_to_id
) VALUES (
  $1, $2
) RETURNING user_from_id, user_to_id
`

type CreateFollowerParams struct {
	UserFromID int64 `json:"user_from_id"`
	UserToID   int64 `json:"user_to_id"`
}

func (q *Queries) CreateFollower(ctx context.Context, arg CreateFollowerParams) (Follower, error) {
	row := q.db.QueryRowContext(ctx, createFollower, arg.UserFromID, arg.UserToID)
	var i Follower
	err := row.Scan(&i.UserFromID, &i.UserToID)
	return i, err
}

const deleteFollower = `-- name: DeleteFollower :exec
DELETE FROM followers
WHERE user_from_id = $1 AND user_to_id = $2
`

type DeleteFollowerParams struct {
	UserFromID int64 `json:"user_from_id"`
	UserToID   int64 `json:"user_to_id"`
}

func (q *Queries) DeleteFollower(ctx context.Context, arg DeleteFollowerParams) error {
	_, err := q.db.ExecContext(ctx, deleteFollower, arg.UserFromID, arg.UserToID)
	return err
}

const getFollower = `-- name: GetFollower :one
SELECT user_from_id, user_to_id FROM followers
WHERE user_from_id = $1 AND user_to_id = $2
`

type GetFollowerParams struct {
	UserFromID int64 `json:"user_from_id"`
	UserToID   int64 `json:"user_to_id"`
}

func (q *Queries) GetFollower(ctx context.Context, arg GetFollowerParams) (Follower, error) {
	row := q.db.QueryRowContext(ctx, getFollower, arg.UserFromID, arg.UserToID)
	var i Follower
	err := row.Scan(&i.UserFromID, &i.UserToID)
	return i, err
}

const getNumFollowers = `-- name: GetNumFollowers :one
SELECT COUNT(*) as count FROM followers
WHERE user_to_id = $1
`

func (q *Queries) GetNumFollowers(ctx context.Context, userToID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNumFollowers, userToID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getNumFollowing = `-- name: GetNumFollowing :one
SELECT COUNT(*) as count FROM followers
WHERE user_from_id = $1
`

func (q *Queries) GetNumFollowing(ctx context.Context, userFromID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNumFollowing, userFromID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listFollowerOfUser = `-- name: ListFollowerOfUser :many
SELECT user_from_id, user_to_id FROM followers
WHERE user_to_id = $1
LIMIT $2
OFFSET $3
`

type ListFollowerOfUserParams struct {
	UserToID int64 `json:"user_to_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListFollowerOfUser(ctx context.Context, arg ListFollowerOfUserParams) ([]Follower, error) {
	rows, err := q.db.QueryContext(ctx, listFollowerOfUser, arg.UserToID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Follower
	for rows.Next() {
		var i Follower
		if err := rows.Scan(&i.UserFromID, &i.UserToID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFollowingOfUser = `-- name: ListFollowingOfUser :many
SELECT user_from_id, user_to_id FROM followers
WHERE user_from_id = $1
LIMIT $2
OFFSET $3
`

type ListFollowingOfUserParams struct {
	UserFromID int64 `json:"user_from_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListFollowingOfUser(ctx context.Context, arg ListFollowingOfUserParams) ([]Follower, error) {
	rows, err := q.db.QueryContext(ctx, listFollowingOfUser, arg.UserFromID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Follower
	for rows.Next() {
		var i Follower
		if err := rows.Scan(&i.UserFromID, &i.UserToID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
