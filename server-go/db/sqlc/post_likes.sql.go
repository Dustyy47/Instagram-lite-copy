// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: post_likes.sql

package db

import (
	"context"
)

const dislikePost = `-- name: DislikePost :exec
DELETE FROM post_likes
WHERE post_id = $1 AND user_id = $2
`

type DislikePostParams struct {
	PostID int64 `json:"post_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DislikePost(ctx context.Context, arg DislikePostParams) error {
	_, err := q.db.ExecContext(ctx, dislikePost, arg.PostID, arg.UserID)
	return err
}

const getLikedPost = `-- name: GetLikedPost :one
SELECT post_id, user_id FROM post_likes
WHERE post_id = $1 AND user_id = $2
LIMIT 1
`

type GetLikedPostParams struct {
	PostID int64 `json:"post_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetLikedPost(ctx context.Context, arg GetLikedPostParams) (PostLike, error) {
	row := q.db.QueryRowContext(ctx, getLikedPost, arg.PostID, arg.UserID)
	var i PostLike
	err := row.Scan(&i.PostID, &i.UserID)
	return i, err
}

const getNumLikesPost = `-- name: GetNumLikesPost :one
SELECT COUNT(*) as count FROM post_likes
WHERE post_id = $1
`

func (q *Queries) GetNumLikesPost(ctx context.Context, postID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNumLikesPost, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const likePost = `-- name: LikePost :exec
INSERT INTO post_likes (
  post_id,
  user_id
) VALUES (
  $1, $2
)
`

type LikePostParams struct {
	PostID int64 `json:"post_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) LikePost(ctx context.Context, arg LikePostParams) error {
	_, err := q.db.ExecContext(ctx, likePost, arg.PostID, arg.UserID)
	return err
}
