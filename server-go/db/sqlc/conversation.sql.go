// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: conversation.sql

package db

import (
	"context"
	"time"
)

const createConversation = `-- name: CreateConversation :one
INSERT INTO conversations (
  user_first_id,
  user_second_id
) VALUES (
  $1, $2
) RETURNING id, user_first_id, user_second_id, last_msg_created_at
`

type CreateConversationParams struct {
	UserFirstID  int64 `json:"user_first_id"`
	UserSecondID int64 `json:"user_second_id"`
}

func (q *Queries) CreateConversation(ctx context.Context, arg CreateConversationParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, createConversation, arg.UserFirstID, arg.UserSecondID)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.UserFirstID,
		&i.UserSecondID,
		&i.LastMsgCreatedAt,
	)
	return i, err
}

const getConverstionByID = `-- name: GetConverstionByID :one
SELECT id, user_first_id, user_second_id, last_msg_created_at FROM conversations
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetConverstionByID(ctx context.Context, id int64) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, getConverstionByID, id)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.UserFirstID,
		&i.UserSecondID,
		&i.LastMsgCreatedAt,
	)
	return i, err
}

const listConversationsOfUser = `-- name: ListConversationsOfUser :many
SELECT id, user_first_id, user_second_id, last_msg_created_at FROM conversations
WHERE user_first_id = $1 OR user_second_id = $1
ORDER BY last_msg_created_at
LIMIT $2
OFFSET $3
`

type ListConversationsOfUserParams struct {
	UserFirstID int64 `json:"user_first_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) ListConversationsOfUser(ctx context.Context, arg ListConversationsOfUserParams) ([]Conversation, error) {
	rows, err := q.db.QueryContext(ctx, listConversationsOfUser, arg.UserFirstID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Conversation
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(
			&i.ID,
			&i.UserFirstID,
			&i.UserSecondID,
			&i.LastMsgCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLastMsgOfConversation = `-- name: UpdateLastMsgOfConversation :exec
UPDATE conversations
SET last_msg_created_at = $2
WHERE id = $1
`

type UpdateLastMsgOfConversationParams struct {
	ID               int64     `json:"id"`
	LastMsgCreatedAt time.Time `json:"last_msg_created_at"`
}

func (q *Queries) UpdateLastMsgOfConversation(ctx context.Context, arg UpdateLastMsgOfConversationParams) error {
	_, err := q.db.ExecContext(ctx, updateLastMsgOfConversation, arg.ID, arg.LastMsgCreatedAt)
	return err
}
