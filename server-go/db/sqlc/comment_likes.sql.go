// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: comment_likes.sql

package db

import (
	"context"
)

const dislikeComment = `-- name: DislikeComment :exec
DELETE FROM comment_likes
WHERE comment_id = $1 AND user_id = $2
`

type DislikeCommentParams struct {
	CommentID int64 `json:"comment_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) DislikeComment(ctx context.Context, arg DislikeCommentParams) error {
	_, err := q.db.ExecContext(ctx, dislikeComment, arg.CommentID, arg.UserID)
	return err
}

const getLikedComment = `-- name: GetLikedComment :one
SELECT comment_id, user_id FROM comment_likes
WHERE comment_id = $1 AND user_id = $2
LIMIT 1
`

type GetLikedCommentParams struct {
	CommentID int64 `json:"comment_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) GetLikedComment(ctx context.Context, arg GetLikedCommentParams) (CommentLike, error) {
	row := q.db.QueryRowContext(ctx, getLikedComment, arg.CommentID, arg.UserID)
	var i CommentLike
	err := row.Scan(&i.CommentID, &i.UserID)
	return i, err
}

const getNumLikesComment = `-- name: GetNumLikesComment :one
SELECT COUNT(*) as count FROM comment_likes
WHERE comment_id = $1
`

func (q *Queries) GetNumLikesComment(ctx context.Context, commentID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNumLikesComment, commentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const likeComment = `-- name: LikeComment :exec
INSERT INTO comment_likes (
  comment_id,
  user_id
) VALUES (
  $1, $2
)
`

type LikeCommentParams struct {
	CommentID int64 `json:"comment_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) LikeComment(ctx context.Context, arg LikeCommentParams) error {
	_, err := q.db.ExecContext(ctx, likeComment, arg.CommentID, arg.UserID)
	return err
}
